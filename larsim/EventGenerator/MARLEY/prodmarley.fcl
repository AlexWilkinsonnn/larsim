#include "services_dune.fcl"
#include "largeantmodules_dune.fcl"
#include "detsimmodules_dune.fcl"
#include "caldata_dune.fcl"

process_name: MarleyGen

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "marley_hist.root" }
  TimeTracker:       {}
  RandomNumberGenerator: {} #ART native random number generator
  user:         @local::dune35t_simulation_services
}


#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:  1000           # Number of events to create
  firstRun:   1              # Run number to use for this file
  firstEvent: 1              # Number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   # Generate events from a MARLEY HepEvt file
   generator: { module_type: "MARLEYGen"
                ConfigFileName: "config.txt"
              }
   # Track particles in the detector using Geant4
   largeant:  @local::dune35t_largeant	  
   # Simulate TPC wire responses
   daq:       @local::dune35t_simwire       
   # Convert raw::RawDigit objects to recob:wire objects
   caldata:   @local::dune35t_calwire
   # Use cheated reconstruction to produce recob:Hit objects
   hitcheat:  @local::dune35t_hitcheater
   # Save the state of the LArSoft random number generators
   rns:       { module_type: "RandomNumberSaver" }
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ generator, largeant, rns] #daq, caldata, hitcheat, rns ]
 
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate]

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   # default file name, can override from command line with -o or --output
   fileName:    "marley_gen.root"
 }
}

# Specify the RNG seed to use
#physics.producers.generator.Seed: 847234282

# Make sure that the geometry is what we think it is
services.user.Geometry: @local::dune35t_geo

# Toggle dumping information about the true particle trajectories in each event to stdout and the debug.log file as events are
# being simulated in largeant
physics.producers.largeant.DumpParticleList: false
# Also toggle dumping information about simulated detector response (sim::SimChannel objects) being made by largeant
physics.producers.largeant.DumpSimChannels: false
# Ensure that empty rawDigits aren't saved
#physics.producers.daq.SaveEmptyChannel: false

# Adjustments to the standard LArG4 parameters
services.user.LArG4Parameters.UseCustomPhysics: true
# HadronHP not currently enabled in LArSoft as a custom physics option. Fix this!
services.user.LArG4Parameters.EnabledPhysics: [ "LowEnergyEm", "SynchrotronAndGN", "Ion", "HadronHP", "Decay",
                                                "HadronElastic", "Stopping"] #, "ChargeExchange" ]
services.user.LArG4Parameters.ParticleKineticEnergyCut: 0.01e-3
services.user.LArG4Parameters.StoreTrajectories: true
services.user.LArG4Parameters.KeepEMShowerDaughters: true
services.user.LArG4Parameters.ISCalculator: "NEST"
