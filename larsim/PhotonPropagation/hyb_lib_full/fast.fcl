#include "services_dune.fcl"
#include "singles_dune.fcl"
#include "largeantmodules_dune.fcl"
#include "detsimmodules_dune.fcl"
#include "mccheatermodules.fcl"
# include "photpropservices_dune.fcl"
#include "photpropservices.fcl"
#include "opticaldetectormodules_dune.fcl"

BEGIN_PROLOG

standard_textfilegen:
{
 module_type:   "TextFileGen"
 InputFileName: "vectors/yscan.vec"   # name of file containing events in hepevt format to
                                      # put into simb::MCTruth objects for use in LArSoft
}

END_PROLOG

process_name: TextGen
#BEA process_name: SinglesGen

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "fast_hist.root" }
  TimeTracker:       {}
  RandomNumberGenerator: {} #ART native random number generator
  message:      @local::standard_info
  @table::dunefd_simulation_services
}

# DUNE FD 1x2x6 workspace geometry
services.Geometry:                @local::dune10kt_1x2x6_geo

# Enable photon simulation for the 1x2x6 geometry.
# This is turned off by default in dunefd_simulation_services
# since the full FD cannot be simulated for photon signals.

services.PhotonVisibilityService: @local::dune10kt_1x2x6_photonvisibilityservice
#BEA start
# ----------  Direct/VUV component modeled with a Landau + Expontial function -------- #

# The 5 parameters are parametrized as a function of the distance
services.PhotonVisibilityService.Direct_landauNormpars: [7.85903, -0.108075, 0.00110999, -6.90009e-06, 2.52576e-08, -5.39078e-11, 6.20863e-14, -2.97559e-17]
services.PhotonVisibilityService.Direct_landauMPVpars: [1.20259, 0.0582674, 0.000308053, -2.71782e-07, -3.37159e-10]
services.PhotonVisibilityService.Direct_landauWidthpars: [0.346667, -0.00768231, 0.000211825, -3.81361e-07]
services.PhotonVisibilityService.Direct_expoCtepars: [13.6592, -0.188798, 0.00192431, -1.10689e-05, 3.38425e-08, -5.20737e-11, 3.17657e-14]
services.PhotonVisibilityService.Direct_expoSlopepars: [-0.57011, 0.0156393, -0.000197461, 1.34491e-06, -5.24544e-09, 1.1703e-11, -1.38811e-14, 6.78368e-18]
# At long distances we extrapolate the behaviour of the parameters:  
services.PhotonVisibilityService.Direct_landauNormpars_far: [2.23151, -0.00627503]	    
services.PhotonVisibilityService.Direct_landauMPVpars_far: [-3.04952, 0.128638]
services.PhotonVisibilityService.Direct_expoCtepars_far: [3.69578, -0.00989582]
services.PhotonVisibilityService.Direct_functions: ["pol7", "pol4", "pol3", "pol6", "pol7", "expo", "pol1", "expo"]
# range of distances where the parametrization is valid [~10 - 500cm], then:
services.PhotonVisibilityService.D_break: 500.
# farther are extrapolations
services.PhotonVisibilityService.D_max: 750.
# increase by this factor the number of points used to sample the function
# improve the accuracy when the scintillation happens very close to the PMT
# where the signal shape (function) is VERY sharp. BUT SLOW DOWN THE SIMULATION! 
services.PhotonVisibilityService.TF1_sampling_factor: 1
# ----------  Direct/VUV component modeled with a Landau + Expontial function -------- #
# The 5 parameters are parametrized as a function of the distance
services.PhotonVisibilityService.Reflected_landauNormpars: [7.54642, -0.441946, 0.0107579, -9.53399e-05]
services.PhotonVisibilityService.Reflected_landauMPVpars: [-1.61482, 1.18624, 0.00105223, -9.52016e-05]
services.PhotonVisibilityService.Reflected_landauWidthpars: [0.440124, -0.0557912, 0.00544957, -9.39128e-05]
services.PhotonVisibilityService.Reflected_expoCtepars: [14.6874, -0.896761, 0.0214977, -0.000185728]
services.PhotonVisibilityService.Reflected_expoSlopepars: [-0.650584, 0.0800897, -0.00379933, 7.91909e-05, -6.10836e-07]
# range of t0s where the parametrization is valid [~8 - 55ns], then:                                                       
services.PhotonVisibilityService.T0_max: 55.
services.PhotonVisibilityService.Reflected_functions: ["pol3", "pol3", "pol3", "pol3", "pol4"]
# ns after the parametrization must be corrected (lack of statistics!)
services.PhotonVisibilityService.T0_break_point: 42.
services.LArPropertiesService.ScintByParticleType: true
services.LArPropertiesService.AlphaScintYield: 1.e9
#BEA end

services.LArG4Parameters.UseCustomPhysics: true
#services.LArG4Parameters.UseLitePhotons: false
#services.LArG4PropertiesService.EnableCerenkovLight: false
services.LArG4Parameters.EnabledPhysics: [ "Em",
                                           "FastOptical",
                                           "SynchrotronAndGN",
                                           "Ion",
                                           "Hadron",
                                           "Decay",
                                           "HadronElastic",
                                           "Stopping",
                                           "NeutronTrackingCut" ]


#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   10           # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   generator: @local::standard_textfilegen
   #BEA generator: @local::dunefd_singlep
   largeant:  @local::dunefd_largeant	  
   rns:       { module_type: "RandomNumberSaver" }
 }

 analyzers:
 {
   pmtresponse: @local::dunefd_simphotoncounter

      
   # This name defines a job step below, and will appear as a directory 
   # in the output histogram file. 
   AnalysisExample: 
   {
      # The "module_type" tells us which module to run. The name here
      # matches the name supplied to DEFINE_ART_MODULE near the end of
      # AnalysisExample_module.cc.

      module_type:     "AnalysisExample"

      # The input parameters for our AnalysisExample module. Compare
      # the names you see here with the reconfigure method in
      # AnalysisExample.cxx. You will want to add/remove/rename the
      # example parameters below to suit your task.

      # If you are reading any objects created by the simulation, then
      # don't change the value of this parameter. This is the name of
      # the 'producer' that ran the simulation module in a previous
      # job. An example of a job file that runs the simulation is
      # ${LARSIM_DIR}/job/prodsingle.fcl; look for "largeant:". It's
      # unlikely that anyone would change the name of this producer.

      SimulationLabel: "largeant"

      # Hits can be created by more than one module in
      # ${LARRECO_DIR}/source/HitFinder. For this example, I picked
      # the one that's usually run first.

      HitLabel:        "gaushit"

      # The same for clusters:

      ClusterLabel:    "fuzzycluster"

      # In this example, which primary particle(s) we'll focus on in an event.
      # PDG code 13 = mu-.
      PDGcode:          13

      # dx used for the dE/dx calculation; units are cm. 
      BinSize:          0.3
   }
 }


 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 # simulate: [ generator, largeant, daq, rns ] 
 simulate: [ generator, largeant, rns ] 
 analyzeIt:  [ AnalysisExample, pmtresponse]
 
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [analyzeIt, stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:   "fast_gen.root"
    #"dune1x2x6_optical_tutorial_sim_gen.root" default file name, can override from command line with -o or --output
 }
}


#
# Change the properties of the generated singles
#

#physics.producers.generator.Theta0XZ: [ 0 ]
#physics.producers.generator.Theta0YZ: [ 0 ]
#physics.producers.generator.SigmaThetaXZ: [ 0 ]
#physics.producers.generator.SigmaThetaYZ: [ 0 ]

#physics.producers.generator.X0:     [ 120.0 ] # 120 cm from wire plan
#physics.producers.generator.SigmaX: [  1.0 ] # fraction with uniform
#physics.producers.generator.Y0:     [  50.0 ] # slightly above center in y
#physics.producers.generator.SigmaY: [ 50.0 ] # fraction with uniform
#physics.producers.generator.Z0:     [   0.0 ] # 1 m into the cryostat
#physics.producers.generator.SigmaZ: [  0.0 ]
#physics.producers.generator.PDist:     0 # uniform
#physics.producers.generator.PosDist:   0 # uniform
#physics.producers.generator.ThetaDist: 0 # uniform
#services.LArPropertiesService.ScintYield:            24. //BEA

#Diegos additions
services.PhotonVisibilityService.TF1_sampling_factor: 1.
services.LArPropertiesService.ScintByParticleType: true
services.PhotonVisibilityService.IncludePropTime:true
physics.analyzers.pmtresponse.MakeAllPhotonsTree: true
physics.analyzers.pmtresponse.MakeDetectedPhotonsTree: true
physics.analyzers.pmtresponse.MakeOpDetsTree: true
physics.analyzers.pmtresponse.MakeOpDetEventsTree: true
physics.analyzers.pmtresponse.MakeLightAnalysisTree: true
