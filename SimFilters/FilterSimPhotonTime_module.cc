////////////////////////////////////////////////////////////////////////
// Class:       FilterSimPhotonTime
// Module Type: filter
// File:        FilterSimPhotonTime_module.cc
//
// Generated at Tue Jan 19 09:42:51 2016 by Wesley Ketchum using artmod
// from cetpkgsupport v1_10_01.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDFilter.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"
#include "cetlib/exception.h"

#include <memory>

#include <string>
#include <vector>
#include <iostream>

#include "Simulation/SimPhotons.h"

namespace simfilter {
  class FilterSimPhotonTime;
}

class simfilter::FilterSimPhotonTime : public art::EDFilter {
public:
  explicit FilterSimPhotonTime(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  FilterSimPhotonTime(FilterSimPhotonTime const &) = delete;
  FilterSimPhotonTime(FilterSimPhotonTime &&) = delete;
  FilterSimPhotonTime & operator = (FilterSimPhotonTime const &) = delete;
  FilterSimPhotonTime & operator = (FilterSimPhotonTime &&) = delete;

  // Required functions.
  bool filter(art::Event & e) override;

  // Selected optional functions.
  //void reconfigure(fhicl::ParameterSet const & p) override;

private:

  std::string                       const fSimPhotonsCollectionLabel;
  std::vector< std::vector<float> > const fTimeWindows;
  float                             const fMinTotalEnergy;
  float                             const fMinPhotonEnergy;
  bool                              const fDebug; 

  void CheckTimeWindows();
};


simfilter::FilterSimPhotonTime::FilterSimPhotonTime(fhicl::ParameterSet const & p)
  :
  fSimPhotonsCollectionLabel(p.get<std::string>("SimPhotonsCollectionLabel")),
  fTimeWindows(p.get< std::vector< std::vector<float> > >("TimeWindows")),
  fMinTotalEnergy(p.get<float>("MinTotalEnergy",0.0)),
  fMinPhotonEnergy(p.get<float>("MinPhotonEnergy",-1)),
  fDebug(p.get<bool>("Debug",false))
{
  CheckTimeWindows();
}

void simfilter::FilterSimPhotonTime::CheckTimeWindows(){

  if(fDebug)
    std::cout << "\tFilterSimPhotonTime: TimeWindows size is "
	      << fTimeWindows.size() << std::endl;
  
  for(auto const& tw : fTimeWindows){


    if(tw.size()!=2)
      throw cet::exception("FilterSimPhotonTime::CheckTimeWindows")
	<< "Bad time window initialization: time window has wrong size (not 2)."
	<< std::endl;
    
    if(fDebug)
      std::cout << "\t\tTimeWindow "
		<< "[" << tw[0] << "," << tw[1] << "]"
		<< std::endl;
    
    if(tw[0]>tw[1])
      throw cet::exception("FilterSimPhotonTime::CheckTimeWindows")
	<< "Bad time window initialization: tw[0]>tw[1]. Reverse the order!"
	<< std::endl;
    
    
  }

}

bool simfilter::FilterSimPhotonTime::filter(art::Event & e)
{

  art::Handle< std::vector<sim::SimPhotons> > simPhotonsHandle;
  e.getByLabel(fSimPhotonsCollectionLabel,simPhotonsHandle);
  std::vector<sim::SimPhotons> const& simPhotonsCollection(*simPhotonsHandle);

  float sum_energy=0.0;
  for(auto const& simphotons : simPhotonsCollection){
    if(fDebug)
      std::cout << "\tFilterSimPhotonTime: Processing simphotons channel "
		<< simphotons.OpChannel()
		<< std::endl;

    for(auto const& photon : simphotons)
      for(auto const& tw : fTimeWindows)
	if(photon.Time>=tw[0] && photon.Time<=tw[1] && photon.Energy>fMinPhotonEnergy){

	  if(fDebug)
	    std::cout << "\t\tPhoton with time " << photon.Time << " detected. "
		      << "Energy is  " << photon.Energy << "."
		      << std::endl;
	  
	  sum_energy += photon.Energy;

	  if(fDebug)
	    std::cout << "\t\tTotal energy is now " << sum_energy << std::endl;

	  if(sum_energy > fMinTotalEnergy) return true;
	}
  }

  if(fDebug)
    std::cout << "\tFilterSimPhotonTime: Final Total energy is " << sum_energy << std::endl;
  
  if(sum_energy > fMinTotalEnergy) return true;

  return false;
}

//void simfilter::FilterSimPhotonTime::reconfigure(fhicl::ParameterSet const & p)
//{
  // Implementation of optional member function here.
//}

DEFINE_ART_MODULE(simfilter::FilterSimPhotonTime)
